class A {
    int x;
    
    // "init" method instead of a Java constructor
    void initA(int x) {
        this.x = x;
        println(m());
    }

    int m() {
        return x;
    }
}

class B extends A {
    int x = 10;
    
    void initB() {
        // If you want to initialize parent's fields:
        this.initA(10);
    }

    @Override
    int m() {
        return x;
    }
}

// In the main block:
{
    B b = new B();    // This calls "new B()" which just allocates an object
    b.initB();        // Now we call b.initB(), which in turn calls initA(10)
                      // That ensures dynamic dispatch calls m() => prints 10
}
