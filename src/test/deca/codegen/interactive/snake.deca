class Segment {
    int x;
    int y;
    Segment suivant;

    void init(int x_init, int y_init) {
        x = x_init;
        y = y_init;
        suivant = null;
    }
}

class Random {
    int X;
    int a = 1664525;
    int b = 1013904223;
    int m = 2147483647;

    int random(int max) {
        X = (a * X + b) % m;
        return X % max;
    }

}

class Asm {
    void getIMAClock() asm("
        SCLK
        LOAD 37(GB), R0
        STORE R1, 1(R0)
    ");

    void readInput() asm ("
        RUTF8
        STORE R1, 30(GB)
    ");

    void hideCursor() asm ("
        LOAD #27, R1
        WUTF8
        LOAD #91, R1
        WUTF8
        LOAD #63, R1
        WUTF8
        LOAD #50, R1
        WUTF8
        LOAD #53, R1
        WUTF8
        LOAD #108, R1
        WUTF8
    ");

    void displayCursor() asm ("
        LOAD #27, R1
        WUTF8
        LOAD #91, R1
        WUTF8
        LOAD #63, R1
        WUTF8
        LOAD #50, R1
        WUTF8
        LOAD #53, R1
        WUTF8
        LOAD #104, R1
        WUTF8
    ");

    void flush() asm ("
        LOAD #27, R1
        WUTF8
        LOAD #91, R1
        WUTF8
        LOAD #72, R1
        WUTF8

        LOAD #27, R1
        WUTF8
        LOAD #91, R1
        WUTF8
        LOAD #74, R1
        WUTF8
    ");

    void printApple() asm ("
        LOAD #240, R1
        WUTF8
        LOAD #159, R1
        WUTF8
        LOAD #141, R1
        WUTF8
        LOAD #142, R1
        WUTF8
    ");

    void printSnakeHead() asm ("
        LOAD #240, R1
        WUTF8
        LOAD #159, R1
        WUTF8
        LOAD #144, R1
        WUTF8
        LOAD #184, R1
        WUTF8
    ");

    void printSnake() asm ("
        LOAD #240, R1
        WUTF8
        LOAD #159, R1
        WUTF8
        LOAD #141, R1
        WUTF8
        LOAD #143, R1
        WUTF8
    ");

    void printCase() asm ("
        LOAD #240, R1
        WUTF8
        LOAD #159, R1
        WUTF8
        LOAD #143, R1
        WUTF8
        LOAD #187, R1
        WUTF8
    ");
}

{
    int grille_largeur;
    int grille_hauteur;
    Segment tete;
    Segment queue;
    int direction;
    int nourriture_x;
    int nourriture_y;
    boolean jeu_actif;
    int x, y;
    int commande;
    int nouvelle_x;
    int nouvelle_y;
    boolean is_serpent;
    Segment courant;
    Segment nouveau;
    Segment avant_queue;
    Random randomGenerator = new Random();
    Asm asmCode = new Asm();

    grille_largeur = 30;
    grille_hauteur = 10;
    tete = new Segment();
    tete.init(5,5);
    queue = tete;
    direction = 100;
    asmCode.getIMAClock();
    nourriture_x = (randomGenerator.random(grille_largeur) + grille_largeur) % grille_largeur;
    nourriture_y = (randomGenerator.random(grille_hauteur) + grille_hauteur) % grille_hauteur;
    jeu_actif = true;

    
    while (jeu_actif) {

        asmCode.hideCursor();
        asmCode.flush();
        println();
        println(" _____                    _____             _        ");
        println("|  __ \\                  / ____|           | |       ");
        println("| |  | | ___  ___ __ _  | (___  _ __   __ _| | _____ ");
        println("| |  | |/ _ \\/ __/ _` |  \\___ \\| '_ \\ / _` | |/ / _ \\");
        println("| |__| |  __/ (_| (_| |  ____) | | | | (_| |   <  __/");
        println("|_____/ \\___|\\___\\__,_| |_____/|_| |_|\\__,_|_|\\_\\___|");
        println();

        // Afficher la grille
        y = 0;
        while (y < grille_hauteur) {
            x = 0;
            while (x < grille_largeur) {
                is_serpent = false;
                courant = tete.suivant;
                while (courant != null) {
                    if (courant.x == x && courant.y == y) {
                        is_serpent = true;
                    }
                    courant = courant.suivant;
                }

                if (tete.x == x && tete.y == y) {
                    asmCode.printSnakeHead();
                } else if (is_serpent) {
                    asmCode.printSnake();
                } else if (x == nourriture_x && y == nourriture_y) {
                    asmCode.printApple();
                } else {
                    asmCode.printCase();
                }
                x = x + 1;
            }
            println();
            y = y + 1;
        }

        // Demander la commande au joueur
        println("\nEntrez une commande : z=haut, s=bas, q=gauche, d=droite, esc=quitter.");
        asmCode.displayCursor();
        asmCode.readInput();
        if (commande == 122 || commande == 113 || commande == 115 || commande == 100) {
            direction = commande;
        } else if (commande == 27) {
            jeu_actif = false;
        }

        // Calculer la nouvelle position de la tête
        nouvelle_x = tete.x;
        nouvelle_y = tete.y;
        if (direction == 122) {
            nouvelle_y = nouvelle_y - 1;
        } else if (direction == 113) {
            nouvelle_x = nouvelle_x - 1;
        } else if (direction == 115) {
            nouvelle_y = nouvelle_y + 1;
        } else if (direction == 100) {
            nouvelle_x = nouvelle_x + 1;
        }

        // Vérifier les collisions avec les murs
        if (nouvelle_x < 0 || nouvelle_y < 0 || nouvelle_x >= grille_largeur || nouvelle_y >= grille_hauteur) {
            println("Vous avez touché le mur ! Fin du jeu.");
            jeu_actif = false;
        }

        // Vérifier les collisions avec le corps
        courant = tete;
        while (courant != null) {
            if (courant.x == nouvelle_x && courant.y == nouvelle_y) {
                println("Vous vous êtes mordu ! Fin du jeu.");
                jeu_actif = false;
            }
            courant = courant.suivant;
        }

        // Ajouter un nouveau segment à la tête
        nouveau = new Segment();
        nouveau.init(nouvelle_x, nouvelle_y);
        nouveau.suivant = tete;
        tete = nouveau;

        // Vérifier si la nourriture est mangée
        if (nouvelle_x == nourriture_x && nouvelle_y == nourriture_y) {
            nourriture_x = (randomGenerator.random(grille_largeur) + grille_largeur) % grille_largeur;
            nourriture_y = (randomGenerator.random(grille_hauteur) + grille_hauteur) % grille_hauteur;
            courant = tete;
            while (courant != null) {
                if (courant.x == nourriture_x && courant.y == nourriture_y) {
                    nourriture_x = (randomGenerator.random(grille_largeur) + grille_largeur) % grille_largeur;
                    nourriture_y = (randomGenerator.random(grille_hauteur) + grille_hauteur) % grille_hauteur;
                    courant = null;
                }
                if (courant != null) {
                    courant = courant.suivant;
                }
            }
        } else {
            // Supprimer le dernier segment (queue)
            avant_queue = tete;
            while (avant_queue.suivant != queue) {
                avant_queue = avant_queue.suivant;
            }
            avant_queue.suivant = null;
            queue = avant_queue;
        }
    }

    // Fin du jeu
    println("Merci d'avoir joué !");
}
